//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""FlyingCamera"",
            ""id"": ""0af5c366-327d-481d-9191-ca3673782414"",
            ""actions"": [
                {
                    ""name"": ""KeyboardMove"",
                    ""type"": ""Value"",
                    ""id"": ""d16cd758-e090-4abc-8408-81332ba8d348"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDrag"",
                    ""type"": ""Value"",
                    ""id"": ""2f7125b8-39d3-4f76-b845-78e4358e4fac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""82ea19d8-3e19-45ba-8034-af0ebf6fdd5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""5e12d09f-b5be-4543-96d4-68ea9af7d66c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e4dc902-5cfd-440a-8961-c1621bd7ae2f"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e215b346-5c21-4f7f-873e-4aa46300d878"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""0dd66743-7351-413e-9c3b-23a6b97b1f4c"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""8d83229b-3fe9-47b7-a46f-a5543040f36f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""5c6db5f5-f115-45d3-93b9-6320733db10b"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""a0882baa-d768-4c33-963d-1ac4045930a2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""e0fc9bc3-12c3-473d-8aec-300f2ce3b469"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""44330b2b-87db-4189-82e3-6626eca989eb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""7be2e6ec-da12-4eed-84df-2c0c98fca3cd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""2cd7b4ac-d548-45e9-887d-f850fddb37b5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""32c082ed-f0f3-4d1d-b8dd-1fd7a207bf3a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7d0eea21-f9e5-4324-aa67-2ed9840266a0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5635f3b9-6aac-4c64-82b8-633eb9e3d635"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FlyingCamera
        m_FlyingCamera = asset.FindActionMap("FlyingCamera", throwIfNotFound: true);
        m_FlyingCamera_KeyboardMove = m_FlyingCamera.FindAction("KeyboardMove", throwIfNotFound: true);
        m_FlyingCamera_MouseDrag = m_FlyingCamera.FindAction("MouseDrag", throwIfNotFound: true);
        m_FlyingCamera_Select = m_FlyingCamera.FindAction("Select", throwIfNotFound: true);
        m_FlyingCamera_ZoomCamera = m_FlyingCamera.FindAction("ZoomCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FlyingCamera
    private readonly InputActionMap m_FlyingCamera;
    private IFlyingCameraActions m_FlyingCameraActionsCallbackInterface;
    private readonly InputAction m_FlyingCamera_KeyboardMove;
    private readonly InputAction m_FlyingCamera_MouseDrag;
    private readonly InputAction m_FlyingCamera_Select;
    private readonly InputAction m_FlyingCamera_ZoomCamera;
    public struct FlyingCameraActions
    {
        private @InputActions m_Wrapper;
        public FlyingCameraActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyboardMove => m_Wrapper.m_FlyingCamera_KeyboardMove;
        public InputAction @MouseDrag => m_Wrapper.m_FlyingCamera_MouseDrag;
        public InputAction @Select => m_Wrapper.m_FlyingCamera_Select;
        public InputAction @ZoomCamera => m_Wrapper.m_FlyingCamera_ZoomCamera;
        public InputActionMap Get() { return m_Wrapper.m_FlyingCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyingCameraActions set) { return set.Get(); }
        public void SetCallbacks(IFlyingCameraActions instance)
        {
            if (m_Wrapper.m_FlyingCameraActionsCallbackInterface != null)
            {
                @KeyboardMove.started -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnKeyboardMove;
                @KeyboardMove.performed -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnKeyboardMove;
                @KeyboardMove.canceled -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnKeyboardMove;
                @MouseDrag.started -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnMouseDrag;
                @MouseDrag.performed -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnMouseDrag;
                @MouseDrag.canceled -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnMouseDrag;
                @Select.started -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnSelect;
                @ZoomCamera.started -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.performed -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.canceled -= m_Wrapper.m_FlyingCameraActionsCallbackInterface.OnZoomCamera;
            }
            m_Wrapper.m_FlyingCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @KeyboardMove.started += instance.OnKeyboardMove;
                @KeyboardMove.performed += instance.OnKeyboardMove;
                @KeyboardMove.canceled += instance.OnKeyboardMove;
                @MouseDrag.started += instance.OnMouseDrag;
                @MouseDrag.performed += instance.OnMouseDrag;
                @MouseDrag.canceled += instance.OnMouseDrag;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @ZoomCamera.started += instance.OnZoomCamera;
                @ZoomCamera.performed += instance.OnZoomCamera;
                @ZoomCamera.canceled += instance.OnZoomCamera;
            }
        }
    }
    public FlyingCameraActions @FlyingCamera => new FlyingCameraActions(this);
    public interface IFlyingCameraActions
    {
        void OnKeyboardMove(InputAction.CallbackContext context);
        void OnMouseDrag(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
    }
}
